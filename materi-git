Istilah pada Git:
- Repo
- Commit
- Hash -> kode/pendanda unik pada sebuah commit
- Checkout -> saat kita berpindah ke sebuah commit
- Branch
- Merge
- Remote
- Clone -> menduplikat di dalam remote (github) ke dalam komputer lokal kita
- Push
- Pull
- Readme -> menjelaskan tentang project kita, bisa singkat, bisa detail, penjelasan instalasi, atau tutorial penggunaan singkat
- Fork/forking -> membuat 'copy/duplikat' dari repo milik orang lain (beserta history (commit)-nya)

"git config --list" -> untuk melihat configurasi git, seperti username dan email yang dimasukkan ke dalam git, lalu untuk keluar menggunakan ":q"
untuk membuat username dan email git kita dapat menggunakan "git config --global user.name "username yg digunakan"" lalu "git config --global user.email "email yg digunakan""
untuk global digunakan untuk seluruh folder yang akan kita gunakan, namun kita dapat menggunakan username dan email local, yang maksudnya username dan email tsb hanya digunakan pada foler(repo) yang ditunjuk dengan menggunakan perintah "git config --local user.name "username yg digunakan"" dan "git config --local user.email "email yg digunakan""

Untuk berpindah dari folder master di git bash gunakan command seperti contoh ini:
cd D:/xampp/htdocs/coba

Untuk menginisiasi folder tersebut gunakan command
git init

command 'pwd' (print working directory) untuk menampilkan directory yang sedang aktif

'git add .' untuk memasukkan semua file ke dalam staging area. Namun untuk memasukkan salah satu file saja ke dalam staging area, kita dapat menggunakan perintah "git add 'nama file'"

lalu untuk menyimpan ke commit dapat menggunakan 'git commit -m "tulis message" namafile' -m disini adalah message

atau dapat langsung sekaligus ke staging area dan commit dengan menggunakan command 'git commit -am "tulis message nya"' -am disini adalah add dan message

'git branch' untuk mengetahui ada branch apa saja di dalam master

'git checkout "nama branch"' untuk berpindah ke branch yang ditunjuk, jadi jika ada perubahan, maka perubahan hanya akan terjadi di branch tersebut

Jenis merge:
1. fast forward merged -> ketika branch yang akan kita gabungkan berada pada satu jalur (direct path), pada merge tipe ini tidak membuat commit baru
fast forward merged bisa menggunakan "git merge 'nama branch'", namun head harus berada (checkout) pada master terlebih dahulu.
lalu gunakan command "git branch --merged" untuk mengetahui apa yang sudah dimerged. dan gunakan command "git branch -d 'nama branch yang akan dihapus'" untuk menghapus branch yang telah dimerged, -d adalah delete
2. three way merged -> ketika branch yang akan digabung tidak berada pada satu jalur.
pada merge tipe three way, dia aka membuat commit baru, sehingga akan diminta memasukkan message, jadi ketika kita menggabungkan dengan command "git merge 'nama branch'" maka akan dihubungkan ke code editor atau ke VIM. untuk keluar dan save message tersebut dari VIM bisa dengan ketik "esc", lalu ":wq!"

Pada saat akan menghapus branch yang belum dimerge, maka ada warning bahwa branch tersebut belum dimerge, sehingga dengan command "git branch -d 'nama branch yang akan dihapus'" branch tersebut tidak dapat dihapus, namun jika kita akan tetap menghapus branch tersebut, kita dapat mengganti -d tersebut dengan huruf kapital seperti command "git branch -D 'nama branch yang akan dihapus'"

"git log" -> untuk menampilkan semua commit yg sudah dilakukan
Jika kita akan kembali ke commit sebelumnya, kita depat menggunakan perintah "git checkout '7 digit commit depan yg akan dituju'" dan kita dapat kembali ke master dengan perintah "git checkout master", lalu kita dapat mengeceknya dengan graph "git log --all --decorate --oneline --graph"
untuk membuat alias graph, dapat menggunakan perintah "alias graph="git log --all --decorate --oneline --graph""

Cloning -> untuk cloning repo dari github, kita masuk ke dalam repo di github yang akan dicloning, lalu copy alamat http-nya, lalu buka git bash di komputer dan arahkan ada folder yang akan dimasukkan cloning dari github, lalu kita dapat memasukkan perintah "git clone 'alamat http yg telah dicopy'", dan repo tsb masuk ke folder yang telah ditentukan
Pada saat kita memasukkan perintah "git remote" maka akan muncuk tulisan origin, yang mana adalah nama remote default ketika kita mengclone dari github, tapi nama tsb dapat diubah nantinya
Dan ketika kita memasukkan perintah "git remote -v" v disini adalah verbose, maka data yang ditampilkan lebih lengkp, terdapat alamat dari remote
Ketika kita mengedit repo dari remote yg ada di komputer kita, kita masukkan ke staging area dan commit repo local tsb, dan kita masukkan perintah "git status" maka akan terdapat keterangan bahwa branch kita berada 1 commit didepan repo github, dan ketika masukkan perintah graph, hal itu akan terlihat
Agar commit yang telah dilakukan di komputer masuk ke dalam repo di github, kita dapat menggunakan perintah "git push". Dan ketika kita graph, maka status repo local akan sama dengan repo di github

Untuk menambahkan repo local ke github, kita harus membuat repo dulu di github, beri nama yang sama, namun kosongkan isi dari repo github tsb, termasuk tidak memberi README didalamnya, lalu akan diarahkan petunjuk dari github jika di github belum ada, dan di local belum ada. atau di local sudah dibuat, namun di github belum.
Jika kita sudah membuat pada local, maka masukkan perintah "git remote add origin 'alamat http dari github'". Artinya kita akan membuat remote baru yang namanya origin (default) dengan alamat yang dimasukkan. nama dari remote dapat diubah.
Lalu untuk memasukkan file yang sudah kita buat di local ke github, tulis perintah "git push -u origin master" u adalah utk menset upstream, agar kedepannya kita hanya masukkan perintah "git push" saja, otomatis dikirim ke remote origin yang branchnya master

"git fetch" untuk mencek branch yg ada di remote (github) sudah sampai mana. Setelah di fetch, jika kita graph master, kita akan mengetahui jika isi dari repo github apakah berbeda dengan repo di local kita. Jika berbeda, maka kita dapat menarik terlebih dahulu isi dari repo github dengan perintah "git pull", setelah di resolve kita dapat lakukan add, commit, dan lakukan push ke remote (github)